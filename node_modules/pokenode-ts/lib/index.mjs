
/**
 * Version 1.20.0 | 6/22/2023
 * Build with Node v16.16.0
 * Licensed under the MIT license
 *  _
 * |_) _  |   _   _   _   _|  _  __  _|_  _
 * |  (_) |< (/_ | | (_) (_| (/_      |_ _>
 *
 * A lightweight Node.js wrapper for the Pok√©API with built-in types.
 * Gabb-c <https://github.com/Gabb-c>
 */

var l=Object.defineProperty;var i=(A,e)=>l(A,"name",{value:e,configurable:!0});var f=(A,e)=>{for(var a in e)l(A,a,{get:e[a],enumerable:!0})};var w={};f(w,{BERRIES:()=>W,BERRY_FIRMNESSES:()=>v,BERRY_FLAVORS:()=>k,BaseURL:()=>O,CONTEST_TYPES:()=>b,EGG_GROUPS:()=>At,ENCOUNTER_CONDITIONS:()=>J,ENCOUNTER_CONDITION_VALUES:()=>Q,ENCOUNTER_METHODS:()=>X,ENDPOINTS:()=>n,EVOLUTION_TRIGGERS:()=>q,GENDERS:()=>Ot,GENERATIONS:()=>Z,GROWTH_RATES:()=>ct,ITEM_ATTRIBUTES:()=>Pt,ITEM_CATEGORIES:()=>mt,ITEM_FLING_EFFECTS:()=>gt,ITEM_POCKETS:()=>pt,LANGUAGES:()=>_t,MOVE_AILMENTS:()=>Et,MOVE_BATTLE_STYLES:()=>st,MOVE_CATEGORIES:()=>nt,MOVE_DAMAGE_CLASSES:()=>rt,MOVE_LEARN_METHODS:()=>it,MOVE_TARGETS:()=>ot,NATURES:()=>Rt,PAL_PARK_AREAS:()=>at,POKEATHLON_STATS:()=>Tt,POKEDEXES:()=>j,POKEMON_COLORS:()=>Nt,POKEMON_HABITATS:()=>ht,POKEMON_SHAPES:()=>It,REGIONS:()=>et,STATS:()=>Lt,TYPES:()=>St,VERSIONS:()=>z,VERSION_GROUPS:()=>tt});var O;(function(A){A.REST="https://pokeapi.co/api/v2"})(O||(O={}));var n={BERRY:"/berry",BERRY_FIRMNESS:"/berry-firmness",BERRY_FLAVOR:"/berry-flavor",CONTEST_TYPE:"/contest-type",CONTEST_EFFECT:"/contest-effect",SUPER_CONTEST_EFFECT:"/super-contest-effect",ENCOUNTER_METHOD:"/encounter-method",ENCOUNTER_CONDITION:"/encounter-condition",ENCOUNTER_CONDITION_VALUE:"/encounter-condition-value",EVOLUTION_CHAIN:"/evolution-chain",EVOLUTION_TRIGGER:"/evolution-trigger",GENERATION:"/generation",POKEDEX:"/pokedex",VERSION:"/version",VERSION_GROUP:"/version-group",ITEM:"/item",ITEM_ATTRIBUTE:"/item-attribute",ITEM_CATEGORY:"/item-category",ITEM_FLING_EFFECT:"/item-fling-effect",ITEM_POCKET:"/item-pocket",LOCATION:"/location",LOCATION_AREA:"/location-area",PALPARK_AREA:"/pal-park-area",REGION:"/region",MACHINE:"/machine",MOVE:"/move",MOVE_AILMENT:"/move-ailment",MOVE_BATTLE_STYLE:"/move-battle-style",MOVE_CATEGORY:"/move-category",MOVE_DAMAGE_CLASS:"/move-damage-class",MOVE_LEARN_METHOD:"/move-learn-method",MOVE_TARGET:"/move-target",ABILITY:"/ability",CHARACTERISTIC:"/characteristic",EGG_GROUP:"/egg-group",GENDER:"/gender",GROWTH_RATE:"/growth-rate",NATURE:"/nature",POKEATHLON_STAT:"/pokeathlon-stat",POKEMON:"/pokemon",POKEMON_LOCATION_AREA:"/pokemon/:id/encounters",POKEMON_COLOR:"/pokemon-color",POKEMON_FORM:"/pokemon-form",POKEMON_HABITAT:"/pokemon-habitat",POKEMON_SHAPE:"/pokemon-shape",POKEMON_SPECIES:"/pokemon-species",STAT:"/stat",TYPE:"/type",LANGUAGE:"/language"};var W={CHERI:1,CHESTO:2,PECHA:3,RAWST:4,ASPEAR:5,LEPPA:6,ORAN:7,PERSIM:8,LUM:9,SITRUS:10,FIGY:11,WIKI:12,MAGO:13,AGUAV:14,IAPAPA:15,RAZZ:16,BLUK:17,NANAB:18,WEPEAR:19,PINAP:20,POMEG:21,KELPSY:22,QUALOT:23,HONDEW:24,GREPA:25,TAMATO:26,CORNN:27,MAGOST:28,RABUTA:29,NOMEL:30,SPELON:31,PAMTRE:32,WATMEL:33,DURIN:34,BELUE:35,OCCA:36,PASSHO:37,WACAN:38,RINDO:39,YACHE:40,CHOPLE:41,KEBIA:42,SHUCA:43,COBA:44,PAYAPA:45,TANGA:46,CHARTI:47,KASIB:48,HABAN:49,COLBUR:50,BABIRI:51,CHILAN:52,LIECHI:53,GANLON:54,SALAC:55,PETAYA:56,APICOT:57,LANSAT:58,STARF:59,ENIGMA:60,MICLE:61,CUSTAP:62,JABOCA:63,ROWAP:64},v={VERY_SOFT:1,SOFT:2,HARD:3,VERY_HARD:4,SUPER_HARD:5},k={SPICY:1,DRY:2,SWEET:3,BITTER:4,SOUR:5};var b={COOL:1,BEAUTY:2,CUTE:3,SMART:4,TOUGH:5};var X={WALK:1,OLD_ROD:2,GOOD_ROD:3,SUPER_ROD:4,SURF:5,ROCK_SMASH:6,HEADBUTT:7,DARK_GRASS:8,GRASS_SPOTS:9,CAVE_SPOTS:10,BRIDGE_SPOTS:11,SUPER_ROD_SPOTS:12,SURF_SPOTS:13,YELLOW_FLOWERS:14,PURPLE_FLOWERS:15,RED_FLOWERS:16,ROUGH_TERRAIN:17,GIFT:18,GIFT_EGG:19,ONLY_ONE:20,POKEFLUTE:21,HEADBUTT_LOW:22,HEADBUTT_NORMAL:23,HEADBUT_HIGH:24,SQUIRT_BOTTLE:25,WAILMER_PAIL:26,SEAWEED:27},J={SWARM:1,TIME:2,RADAR:3,SLOT2:4,RADIO:5,SEASON:6,STARTER:7,TV_OPTION:8,STORY_PROGRESS:9,OTHER:10},Q={SWARM_YES:1,SWARM_NO:2,TIME_MORNING:3,TIME_DAY:4,TIME_NIGHT:5,RADAR_ON:6,RADAR_OFF:7,SLOT2_NONE:8,SLOT2_RUBY:9,SLOT2_SAPHIRE:10,SLOT2_EMERALD:11,SLOT2_FIRERED:12,SLOT2_LEAFGREEN:13,RADIO_OFF:14,RADIO_HOEN:15,RADIO_SINNOH:16,SEASON_SPRING:17,SEASON_SUMMER:18,SWASON_AUTUMN:19,SEASON_WINTER:20,STARTER_BULBASAUR:21,STARTER_SQUIRTLE:22,STARTER_CHARMANDER:23,STARTER_CHESPIN:24,STARTER_FENNEKIN:25,STARTER_FROAKIE:26,TV_OPTION_BLUE:27,TV_OPTION_RED:28,STORY_PROGRESS_AWAKENED_BEASTS:29,STORY_PROGRESS_BEAT_GALACTIC_CORONET:30,STORY_PROGRESS_OAK_ETERNA_CITY:31,STORY_PROGRESS_OAK_VERMILION_COPYCAT:32,STORY_PROGRESS_MET_TORNADUS_THUNDURUS:33,STORY_PROGRESS_BEAT_ELITE_FOUR_ROUND_TWO:34,STORY_PROGRESS_HALL_OF_FAME:35,STORY_PROGRESS_NONE:36,STORY_PROGRESS_NATIONAL_DEX:37,OTHER_NONE:38,OTHER_SNORLAX_LL_BEAT_LEAGUE:39};var q={LEVEL_UP:1,TRADE:2,USE_ITEM:3,SHED:4,SPIN:5,TOWER_OF_DARKNESS:6,TOWER_OF_WATER:7,THREE_CRITICAL_HITS:8,TAKE_DAMAGE:9,OTHER:10};var Z={GENERATION_I:1,GENERATION_II:2,GENERATION_III:3,GENERATION_IV:4,GENERATION_V:5,GENERATION_VI:6,GENERATION_VII:7,GENERATION_VIII:8},j={NATIONAL:1,KANTO:2,ORIGINAL_JOHTO:3,HOENN:4,ORIGINAL_SINNOH:5,EXTENDED_SINNOH:6,UPDATED_JOHTO:7,ORIGINAL_UNOVA:8,UPDATED_UNOVA:9,CONQUEST_GALLERY:11,KALOS_CENTRAL:12,KALOS_COASTAL:13,KALOS_MONTAIN:14,UPDATED_HOENN:15,ORIGINAL_ALOLA:16,ORIGINAL_MELEMELE:17,ORIGINAL_AKALA:18,ORIGINAL_ULAULA:19,ORIGINAL_PONI:20,UPDATED_ALOLA:21,UPDATED_MELEMELE:22,UPDATED_AKALA:23,UPDATED_ULAULA:24,UPDATED_PONI:25,UPDATED_KANTO:26,GALAR:27,ISLE_OF_ARMOR:28,CROWN_TUNDRA:29},z={RED:1,BLUE:2,YELLOW:3,GOLD:4,SILVER:5,CRYSTAL:6,RUBY:7,SAPPHIRE:8,EMERALD:9,FIRERED:10,LEAFGREEN:11,DIAMOND:12,PEARL:13,PLATINUM:14,HEARTGOLD:15,SOULSILVER:16,BLACK:17,WHITE:18,COLOSSEUM:19,XD:20,BLACK_2:21,WHITE_2:22,X:23,Y:24,OMEGA_RUBY:25,ALPHA_SAPPHIRE:26,SUN:27,MOON:28,ULTRA_SUN:29,ULTRA_MOON:30,LETS_GO_PIKACHU:31,LETS_GO_EEVEE:32,SWORD:33,SHIELD:34,THE_ISLE_OF_ARMOR:35,THE_CROWN_TUNDRA:36,BRILLIANT_DIAMOND:37,SHINING_PEARL:38,LEGENDS_ARCEUS:39},tt={RED_BLUE:1,YELLOW:2,GOLD_SILVER:3,CRYSTAL:4,RUBY_SAPPHIRE:5,EMERALD:6,FIRERED_LEAFGREEN:7,DIAMOND_PEARL:8,PLATINUM:9,HEARTGOLD_SOULSILVER:10,BLACK_WHITE:11,COLOSSEUM:12,XD:13,BLACK_2_WHITE_2:14,X_Y:15,OMEGA_RUBY_ALPHA_SAPPHIRE:16,SUN_MOON:17,ULTRA_SUN_ULTRA_MOON:18,LETS_GO:19,SWORD_SHIELD:20,THE_ISLE_OF_ARMOR:21,THE_CROWN_TUNDRA:22,BRILLIANT_DIAMOND_AND_SHINING_PEARL:23,LEGENDS_ARCEUS:24};var et={KANTO:1,JOHTO:2,HOENN:3,SINNOH:4,UNOVA:5,KALOS:6,ALOLA:7,GALAR:8,HISUI:9},at={FOREST:1,FIELD:2,MOUNTAIN:3,POND:4,SEA:5};var Et={UNKNOWN:-1,NONE:0,PARALYSIS:1,SLEEP:2,FREEZE:3,BURN:4,POISON:5,CONFUSION:6,INFATUATION:7,TRAP:8,NIGHTMARE:9,TORMENT:12,DISABLE:13,YAWN:14,HEAL_BLOCK:15,NO_TYPE_IMMUNITY:17,LEECH_SEED:18,EMBARGO:19,PERISH_SONG:20,INGRAIN:21,SILENCE:24,TAR_SHOT:42},st={ATTACK:1,DEFENSE:2,SUPPORT:3},nt={DAMAGE:0,AILMENT:1,NET_GOOD_STATS:2,HEAL:3,DAMAGE_AILMENT:4,SWAGGER:5,DAMAGE_LOWER:6,DAMAGE_RAISE:7,DAMAGE_HEAL:8,OHKO:9,WHOLE_FIELD_EFFECT:10,FIELD_EFFECT:11,FORCE_SWITCH:12,UNIQUE:13},rt={STATUS:1,PHYSICAL:2,SPECIAL:3},it={LEVEL_UP:1,EGG:2,TUTOR:3,MACHINE:4,STADIUM_SURFING_PIKACHU:5,LIGHT_BALL_EGG:6,COLOSSEUM_PURIFICATION:7,XD_SHADOW:8,XD_PURIFICATION:9,FORM_CHANGE:10},ot={SPECIFIC_MOVE:1,SELECTED_POKEMON_ME_FIRST:2,ALLY:3,USERS_FIELD:4,USER_OR_ALLY:5,OPPONENTS_FIELD:6,USER:7,RANDOM_OPPONENT:8,ALL_OTHER_POKEMON:9,SELECTED_POKEMON:10,ALL_OPPONENTS:11,ENTIRE_FIELD:12,USER_AND_ALIES:13,ALL_POKEMON:14,ALL_ALLIES:15};var At={MONSTER:1,WATER1:2,BUG:3,FLYING:4,GROUND:5,FAIRY:6,PLANT:7,HUMANSHAPE:8,WATER3:9,MINERAL:10,INDETERMINATE:11,WATER2:12,DITTO:13,DRAGON:14,NO_EGGS:15},Ot={FEMALE:1,MALE:2,GENDERLESS:3},ct={SLOW:1,MEDIUM:2,FAST:3,MEDIUM_SLOW:4,SLOW_THEN_VERY_FAST:5,FAST_THEN_VERY_SLOW:6},Rt={HARDY:1,BOLD:2,MODEST:3,CALM:4,TIMID:5,LONELY:6,DOCILE:7,MILD:8,GENTLE:9,HASTY:10,ADAMANT:11,IMPISH:12,BASHFUL:13,CAREFUL:14,RASH:15,JOLLY:16,NAUGHTY:17,LAX:18,QUIRKY:19,NAIVE:20,BRAVE:21,RELAXED:22,QUIET:23,SASSY:24,SERIOUS:25},Tt={SPEED:1,POWER:2,SKILL:3,STAMINA:4,JUMP:5},Nt={BLACK:1,BLUE:2,BROWN:3,GRAY:4,GREEN:5,PINK:6,PURPLE:7,RED:8,WHITE:9,YELLOW:10},ht={CAVE:1,FOREST:2,GRASSLAND:3,MONTAIN:4,RARE:5,ROUGH_TERRAIN:6,SEA:7,URBAN:8,WATERS_EDGE:9},It={BALL:1,SQUIGGLE:2,FISH:3,ARMS:4,BLOB:5,UPRIGHT:6,LEGS:7,QUADRUPED:8,WINGS:9,TENTACLES:10,HEADS:11,HUMANOID:12,BUG_WINGS:13,ARMOR:14},Lt={HP:1,ATTACK:2,DEFENSE:3,SPECIAL_ATTACK:4,SPECIAL_DEFENSE:5,SPEED:6,ACCURACY:7,EVASION:8},St={NORMAL:1,FIGHTING:2,FLYING:3,POISON:4,GROUND:5,ROCK:6,BUG:7,GHOST:8,STEEL:9,FIRE:10,WATER:11,GRASS:12,ELECTRIC:13,PSYCHIC:14,ICE:15,DRAGON:16,DARK:17,FAIRY:18,UNKNOWN:10001,SHADOW:10002};var _t={JA_HRKT:1,ROOMAJI:2,KO:3,ZH_HANT:4,FR:5,DE:6,ES:7,IT:8,EN:9,CS:10,JA:11,ZH_HANS:12,PT_BR:13};var Pt={COUNTABLE:1,CONSUMABLE:2,USABLE_OVERWORLD:3,USABLE_IN_BATTLE:4,HOLDABLE:5,HOLDABLE_PASSIVE:6,HOLDABLE_ACTIVE:7,UNDERGROUND:8},mt={STAT_BOOSTS:1,EFFORT_DROP:2,MEDICINE:3,OTHER:4,IN_A_PINCH:5,PICKY_HEALING:6,TYPE_PROTECTION:7,BAKING_ONLY:8,COLLECTIBLES:9,EVOLUTION:10,SPELUNKING:11,HELD_ITEMS:12,CHOICE:13,EFFORT_TRAINING:14,BAD_HELD_ITEMS:15,TRAINING:16,PLATES:17,SPECIES_SPECIFIC:18,TYPE_ENHANCEMENT:19,EVENT_ITEMS:20,GAMEPLAY:21,PLOT_ADVANCEMENT:22,UNUSED:23,LOOT:24,ALL_MAIL:25,VITAMINS:26,HEALING:27,PP_RECOVERY:28,REVIVAL:29,STATUS_CURES:30,MULCH:32,SPECIAL_BALLS:33,STANDARD_BALLS:34,DEX_COMPLETION:35,SCARVES:36,ALL_MACHINES:37,FLUTES:38,APRICORN_BALLS:39,APRICORN_BOX:40,DATA_CARDS:41,JEWELS:42,MIRACLE_SHOOTER:43,MEGA_STONES:44,MEMORIES:45,Z_CRYSTALS:46,SPECIES_CANDIES:47,CATCHING_BONUS:48,DYNAMAX_CRISTALS:49,NATURE_MINTS:50,CURRY_INGREDIENTS:51},gt={BADLY_POISON:1,BURN:2,BERRY_EFFECT:3,HERB_EFFECT:4,PARALYZE:5,POISON:6,FLINCH:7},pt={MISC:1,MEDICINE:2,POKEBALLS:3,MACHINES:4,BERRIES:5,MAIL:6,BATTLE:7,KEY:8};var F=i((A,e)=>(e&&console.log(`[ Request Config ] ${A.method?.toUpperCase()||""} | ${A.url||""}`),A),"handleRequest"),Y=i((A,e)=>(e&&console.error(`[ Request Error ] CODE ${A.code||"UNKNOWN"} | ${A.message}`),Promise.reject(A)),"handleRequestError"),V=i((A,e)=>(e&&console.log(`[ Response ] STATUS ${A.status} | ${A.cached?"CACHED":"NOT CACHED"}`),A),"handleResponse"),K=i((A,e)=>(e&&console.error(`[ Response Error ] CODE ${A.code||"UNKNOWN"} | ${A.message}`),Promise.reject(A)),"handleResponseError");import Mt from"axios";import{setupCache as Ct}from"axios-cache-interceptor";var g=class{api;constructor(e){this.api=Ct(Mt.create({baseURL:e?.baseURL??O.REST,headers:{"Content-Type":"application/json"}}),e?.cacheOptions),this.api.interceptors.request.use(a=>F(a,e?.logs),a=>Y(a,e?.logs)),this.api.interceptors.response.use(a=>V(a,e?.logs),a=>K(a,e?.logs))}getListURL(e,a,E){return`${e}?offset=${a??0}&limit=${E??20}`}},o=g;i(g,"BaseClient");var p=class extends o{async getBerryByName(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getBerryById(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getBerryFirmnessById(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY_FIRMNESS}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getBerryFirmnessByName(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY_FIRMNESS}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getBerryFlavorById(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY_FLAVOR}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getBerryFlavorByName(e){return new Promise((a,E)=>{this.api.get(`${n.BERRY_FLAVOR}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}listBerries(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.BERRY,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}listBerryFirmnesses(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.BERRY_FIRMNESS,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}listBerryFlavors(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.BERRY_FLAVOR,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},c=p;i(p,"BerryClient");var M=class extends o{async getContestTypeByName(e){return new Promise((a,E)=>{this.api.get(`${n.CONTEST_TYPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getContestTypeById(e){return new Promise((a,E)=>{this.api.get(`${n.CONTEST_TYPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getContestEffectById(e){return new Promise((a,E)=>{this.api.get(`${n.CONTEST_EFFECT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getSuperContestEffectById(e){return new Promise((a,E)=>{this.api.get(`${n.SUPER_CONTEST_EFFECT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listContestTypes(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.CONTEST_TYPE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listContestEffects(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.CONTEST_EFFECT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listSuperContestEffects(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.SUPER_CONTEST_EFFECT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},R=M;i(M,"ContestClient");var C=class extends o{async getEncounterMethodByName(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_METHOD}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEncounterMethodById(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_METHOD}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEncounterConditionById(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_CONDITION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEncounterConditionByName(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_CONDITION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEncounterConditionValueByName(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_CONDITION_VALUE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEncounterConditionValueById(e){return new Promise((a,E)=>{this.api.get(`${n.ENCOUNTER_CONDITION_VALUE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listEncounterMethods(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ENCOUNTER_METHOD,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listEncounterConditions(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ENCOUNTER_CONDITION,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listEncounterConditionValues(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ENCOUNTER_CONDITION_VALUE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},T=C;i(C,"EncounterClient");var U=class extends o{async getEvolutionChainById(e){return new Promise((a,E)=>{this.api.get(`${n.EVOLUTION_CHAIN}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEvolutionTriggerById(e){return new Promise((a,E)=>{this.api.get(`${n.EVOLUTION_TRIGGER}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEvolutionTriggerByName(e){return new Promise((a,E)=>{this.api.get(`${n.EVOLUTION_TRIGGER}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listEvolutionChains(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.EVOLUTION_CHAIN,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listEvolutionTriggers(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.EVOLUTION_TRIGGER,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},N=U;i(U,"EvolutionClient");var y=class extends o{async getGenerationByName(e){return new Promise((a,E)=>{this.api.get(`${n.GENERATION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getGenerationById(e){return new Promise((a,E)=>{this.api.get(`${n.GENERATION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokedexByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEDEX}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokedexById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEDEX}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getVersionByName(e){return new Promise((a,E)=>{this.api.get(`${n.VERSION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getVersionById(e){return new Promise((a,E)=>{this.api.get(`${n.VERSION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getVersionGroupByName(e){return new Promise((a,E)=>{this.api.get(`${n.VERSION_GROUP}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getVersionGroupById(e){return new Promise((a,E)=>{this.api.get(`${n.VERSION_GROUP}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listGenerations(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.GENERATION,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokedexes(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEDEX,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listVersions(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.VERSION,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listVersionGroups(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.VERSION_GROUP,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},h=y;i(y,"GameClient");var u=class extends o{async getItemByName(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemById(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemAttributeByName(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_ATTRIBUTE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemAttributeById(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_ATTRIBUTE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemCategoryByName(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_CATEGORY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemCategoryById(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_CATEGORY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemFlingEffectByName(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_FLING_EFFECT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemFlingEffectById(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_FLING_EFFECT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemPocketByName(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_POCKET}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getItemPocketById(e){return new Promise((a,E)=>{this.api.get(`${n.ITEM_POCKET}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listItems(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ITEM,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listItemAttributes(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ITEM_ATTRIBUTE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listItemCategories(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ITEM_CATEGORY,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listItemFilingEffects(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ITEM_FLING_EFFECT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listItemPockets(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ITEM_POCKET,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},I=u;i(u,"ItemClient");var d=class extends o{async getLocationByName(e){return new Promise((a,E)=>{this.api.get(`${n.LOCATION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getLocationById(e){return new Promise((a,E)=>{this.api.get(`${n.LOCATION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getLocationAreaByName(e){return new Promise((a,E)=>{this.api.get(`${n.LOCATION_AREA}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getLocationAreaById(e){return new Promise((a,E)=>{this.api.get(`${n.LOCATION_AREA}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPalParkAreaByName(e){return new Promise((a,E)=>{this.api.get(`${n.PALPARK_AREA}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPalParkAreaById(e){return new Promise((a,E)=>{this.api.get(`${n.PALPARK_AREA}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getRegionByName(e){return new Promise((a,E)=>{this.api.get(`${n.REGION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getRegionById(e){return new Promise((a,E)=>{this.api.get(`${n.REGION}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listLocations(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.LOCATION,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listLocationAreas(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.LOCATION_AREA,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPalParkAreas(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.PALPARK_AREA,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listRegions(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.REGION,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},L=d;i(d,"LocationClient");var B=class extends o{async getMachineById(e){return new Promise((a,E)=>{this.api.get(`${n.MACHINE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listMachines(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MACHINE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},S=B;i(B,"MachineClient");var G=class extends o{async getMoveByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveAilmentByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_AILMENT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveAilmentById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_AILMENT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveBattleStyleByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_BATTLE_STYLE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveBattleStyleById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_BATTLE_STYLE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveCategoryByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_CATEGORY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveCategoryById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_CATEGORY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveDamageClassByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_DAMAGE_CLASS}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveDamageClassById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_DAMAGE_CLASS}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveLearnMethodByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_LEARN_METHOD}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveLearnMethodById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_LEARN_METHOD}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveTargetByName(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_TARGET}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getMoveTargetById(e){return new Promise((a,E)=>{this.api.get(`${n.MOVE_TARGET}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listMoves(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveAilments(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_AILMENT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveBattleStyles(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_BATTLE_STYLE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveCategories(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_CATEGORY,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveDamageClasses(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_DAMAGE_CLASS,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveLearnMethods(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_LEARN_METHOD,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listMoveTargets(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.MOVE_TARGET,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},_=G;i(G,"MoveClient");var D=class extends o{async getAbilityByName(e){return new Promise((a,E)=>{this.api.get(`${n.ABILITY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getAbilityById(e){return new Promise((a,E)=>{this.api.get(`${n.ABILITY}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getCharacteristicById(e){return new Promise((a,E)=>{this.api.get(`${n.CHARACTERISTIC}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEggGroupByName(e){return new Promise((a,E)=>{this.api.get(`${n.EGG_GROUP}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getEggGroupById(e){return new Promise((a,E)=>{this.api.get(`${n.EGG_GROUP}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getGenderByName(e){return new Promise((a,E)=>{this.api.get(`${n.GENDER}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getGenderById(e){return new Promise((a,E)=>{this.api.get(`${n.GENDER}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getGrowthRateByName(e){return new Promise((a,E)=>{this.api.get(`${n.GROWTH_RATE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getGrowthRateById(e){return new Promise((a,E)=>{this.api.get(`${n.GROWTH_RATE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getNatureByName(e){return new Promise((a,E)=>{this.api.get(`${n.NATURE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getNatureById(e){return new Promise((a,E)=>{this.api.get(`${n.NATURE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokeathlonStatByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEATHLON_STAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokeathlonStatById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEATHLON_STAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonLocationAreaById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_LOCATION_AREA.replace(":id",e.toString())}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonColorByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_COLOR}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonColorById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_COLOR}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonFormByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_FORM}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonFormById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_FORM}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonHabitatByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_HABITAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonHabitatById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_HABITAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonShapeByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_SHAPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonShapeById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_SHAPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonSpeciesByName(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_SPECIES}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getPokemonSpeciesById(e){return new Promise((a,E)=>{this.api.get(`${n.POKEMON_SPECIES}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getStatByName(e){return new Promise((a,E)=>{this.api.get(`${n.STAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getStatById(e){return new Promise((a,E)=>{this.api.get(`${n.STAT}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getTypeByName(e){return new Promise((a,E)=>{this.api.get(`${n.TYPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getTypeById(e){return new Promise((a,E)=>{this.api.get(`${n.TYPE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async listAbilities(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.ABILITY,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listCharacteristics(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.CHARACTERISTIC,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listEggGroups(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.EGG_GROUP,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listGenders(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.GENDER,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listGrowthRates(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.GROWTH_RATE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listNatures(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.NATURE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokeathlonStats(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEATHLON_STAT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemons(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemonColors(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON_COLOR,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemonForms(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON_FORM,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemonHabitats(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON_HABITAT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemonShapes(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON_SHAPE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listPokemonSpecies(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.POKEMON_SPECIES,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listStats(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.STAT,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}async listTypes(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.TYPE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},P=D;i(D,"PokemonClient");var $=class extends o{async getLanguageById(e){return new Promise((a,E)=>{this.api.get(`${n.LANGUAGE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getLanguageByName(e){return new Promise((a,E)=>{this.api.get(`${n.LANGUAGE}/${e}`).then(t=>a(t.data)).catch(t=>E(t))})}async getResourceByUrl(e){return new Promise((a,E)=>{this.api.get(e,{baseURL:""}).then(t=>a(t.data)).catch(t=>E(t))})}listLanguages(e,a){return new Promise((E,t)=>{let r=this.getListURL(n.LANGUAGE,e,a);this.api.get(r).then(s=>E(s.data)).catch(s=>t(s))})}},m=$;i($,"UtilityClient");var H=class extends o{berry;contest;encounter;evolution;game;item;location;machine;move;pokemon;utility;constructor(e){super(e),this.berry=new c(e),this.contest=new R(e),this.encounter=new T(e),this.evolution=new N(e),this.game=new h(e),this.item=new I(e),this.location=new L(e),this.machine=new S(e),this.move=new _(e),this.pokemon=new P(e),this.utility=new m(e)}},x=H;i(H,"MainClient");export{W as BERRIES,v as BERRY_FIRMNESSES,k as BERRY_FLAVORS,o as BaseClient,O as BaseURL,c as BerryClient,b as CONTEST_TYPES,w as Constants,R as ContestClient,At as EGG_GROUPS,J as ENCOUNTER_CONDITIONS,Q as ENCOUNTER_CONDITION_VALUES,X as ENCOUNTER_METHODS,n as ENDPOINTS,q as EVOLUTION_TRIGGERS,T as EncounterClient,N as EvolutionClient,Ot as GENDERS,Z as GENERATIONS,ct as GROWTH_RATES,h as GameClient,Pt as ITEM_ATTRIBUTES,mt as ITEM_CATEGORIES,gt as ITEM_FLING_EFFECTS,pt as ITEM_POCKETS,I as ItemClient,_t as LANGUAGES,L as LocationClient,Et as MOVE_AILMENTS,st as MOVE_BATTLE_STYLES,nt as MOVE_CATEGORIES,rt as MOVE_DAMAGE_CLASSES,it as MOVE_LEARN_METHODS,ot as MOVE_TARGETS,S as MachineClient,x as MainClient,_ as MoveClient,Rt as NATURES,at as PAL_PARK_AREAS,Tt as POKEATHLON_STATS,j as POKEDEXES,Nt as POKEMON_COLORS,ht as POKEMON_HABITATS,It as POKEMON_SHAPES,P as PokemonClient,et as REGIONS,Lt as STATS,St as TYPES,m as UtilityClient,z as VERSIONS,tt as VERSION_GROUPS};
